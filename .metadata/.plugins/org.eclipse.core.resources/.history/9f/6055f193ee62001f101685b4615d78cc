package com.hdfc.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;
import org.springframework.web.servlet.config.annotation.CorsRegistry;

@Configuration
@EnableMethodSecurity
@EnableWebSecurity
public class SpringSecurityConfig extends WebSecurityConfiguration {
	@Autowired
	private UserDetailsService userDetailsService;

	/*
	 * @Bean SecurityFilterChain securityFilterChain(HttpSecurity http) throws
	 * Exception { http.csrf().disable(). .authorizeRequests()
	 * .antMatchers("/api/users/register").permitAll()
	 * .authorizeHttpRequests((authorize)-> {
	 * 
	 * 
	 * authorize.requestMatchers(HttpMethod.POST, "/account/**").hasRole("ADMIN");
	 * authorize.requestMatchers(HttpMethod.PUT,"/account/**").hasRole("ADMIN");
	 * authorize.requestMatchers(HttpMethod.DELETE,"/account/**").hasRole("ADMIN");
	 * authorize.requestMatchers(HttpMethod.GET,"/account/**").hasAnyRole(
	 * "ADMIN,MANAGER,USER");
	 * authorize.requestMatchers(HttpMethod.PATCH,"/account/**").hasAnyRole(
	 * "ADMIN,MANAGER,USER");
	 * 
	 * authorize.anyRequest().authenticated();})
	 * .httpBasic(Customizer.withDefaults()); return http.build(); }
	 */

	@Bean
	SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
		http.csrf().disable()
		.authorizeHttpRequests(authorize -> {
			authorize.requestMatchers(new AntPathRequestMatcher("/api/users/register")).permitAll().anyRequest()
					.authenticated();
		}).httpBasic(Customizer.withDefaults());
		return http.build();
}
	
	public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping("/**")
                .allowedOrigins("http://localhost:3000")
                .allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS")
                .allowedHeaders("*")
                .allowCredentials(true);
    }

	@Bean
    public AuthenticationManager authenticationManagerBean() throws Exception {
        return super.authenticationManagerBean();
    }

	@Bean
	public static PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}

	@Bean
	public AuthenticationManager authenticationManager(AuthenticationConfiguration configuration) throws Exception {
		return configuration.getAuthenticationManager();
	}
	
	// Inmemory Authentication
		/*
		 * @Bean public UserDetailsService userDetailsService() { UserDetails admin =
		 * User.builder().username("gsnr").password(passwordEncoder().encode("pass")).
		 * roles("ADMIN").build(); UserDetails user =
		 * User.builder().username("siri").password(passwordEncoder().encode("pass")).
		 * roles("USER").build(); return new InMemoryUserDetailsManager(admin,user); }
		 */
}
