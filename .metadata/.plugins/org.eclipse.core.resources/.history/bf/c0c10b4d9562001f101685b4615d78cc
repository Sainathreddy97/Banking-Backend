package com.hdfc.service;

import java.util.List;
import java.util.stream.Collector;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.hdfc.dto.AccountDto;
import com.hdfc.entity.Account;
import com.hdfc.mapper.AccountMapper;
import com.hdfc.repository.AccountRepository;
@Service
public class AccountServiceImpl implements AccountService {
@Autowired
private AccountRepository accountRepository;
	
	public AccountDto saveAccount(AccountDto accountDto) {
		Account account = AccountMapper.mapToAccount(accountDto);
		Account savedAccount = accountRepository.save(account);
		return AccountMapper.mapToAccountDto(savedAccount);
	}

	
	public AccountDto getAccountById(Long id) {
	    Account account = accountRepository.findById(id).orElseThrow(
	            () -> new RuntimeException("Account Not Found"));
	    return AccountMapper.mapToAccountDto(account);
	}


	@Override
	public AccountDto deposit(Long id, double amount) {
		Account account = accountRepository.findById(id).orElseThrow(
	            () -> new RuntimeException("Account Not Found"));
		double total = account.getBalance() + amount;
		account.setBalance(total);
		Account savedAccount = accountRepository.save(account);
		return AccountMapper.mapToAccountDto(savedAccount);
	}


	
	public AccountDto withdraw(Long id, double amount) {
		Account account = accountRepository.findById(id).orElseThrow(
	            () -> new RuntimeException("Account Not Found"));
		
		//checking withdraw amount is greater than current amount or not
		if(account.getBalance() < amount) {
			throw new RuntimeException("Insufficient Funds");
		}
		
		double total = account.getBalance() - amount;
		account.setBalance(total);
		Account savedAccount = accountRepository.save(account);
		return AccountMapper.mapToAccountDto(savedAccount);
		
	}


	@Override
	public List<AccountDto> getAllAccount() {
		List<Account> accounts = accountRepository.findAll();
		 return accounts.stream().map((account)->AccountMapper.mapToAccountDto(account)).collect(Collectors.toList());
	
	}


	
}
