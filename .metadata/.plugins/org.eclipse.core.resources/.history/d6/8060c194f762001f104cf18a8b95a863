package com.hdfc.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.hdfc.entity.User;
import com.hdfc.security.CustomUserDetailsService;

@RestController
@RequestMapping("/api/auth")
@CrossOrigin(origins = "http://localhost:3000")
public class AuthController {
	 @Autowired
	    private AuthenticationManager authenticationManager;

	    @Autowired
	    private CustomUserDetailsService customUserDetailsService;

	    @PostMapping("/login")
	    public ResponseEntity<String> authenticateUser(@RequestBody User user {
	        try {
	            // Load user by username or email
	            UserDetails userDetails = customUserDetailsService.loadUserByUsername(user.getUsernameOrEmail());

	            // Authenticate the user
	            Authentication authentication = authenticationManager.authenticate(
	                    new UsernamePasswordAuthenticationToken(
	                            user.getUsername(),
	                           
	                            user.getPassword()
	                    )
	            );

	            SecurityContextHolder.getContext().setAuthentication(authentication);
	            return new ResponseEntity<>("Login successful", HttpStatus.OK);
	        } catch (UsernameNotFoundException e) {
	            return new ResponseEntity<>("User not found", HttpStatus.NOT_FOUND);
	        } catch (Exception e) {
	            return new ResponseEntity<>("Invalid username or password", HttpStatus.UNAUTHORIZED);
	        }
	    }
}
