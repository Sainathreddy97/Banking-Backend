package com.authenticate.service;
import java.util.List;
import java.util.Optional;

import org.modelmapper.ModelMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;

import com.authenticate.dto.UserDto;
import com.authenticate.entity.User;
import com.authenticate.exception.ResourceNotFoundException;
import com.authenticate.repository.UserRepository;
public class UserServiceImpl implements UserService {
	Logger logger = LoggerFactory.getLogger(UserServiceImpl.class);
	@Autowired
	UserRepository userRepository;
	@Autowired
	private ModelMapper modelMapper;
	@Autowired
    private PasswordEncoder passwordEncoder;
	@Override
	public UserDto getUser(long id) {
		User user = userRepository.findById(id).orElseThrow(
				()->new  ResourceNotFoundException("user","id",id)
				);
		//User user = byId.get();	(Not Required)
		//return UserMapper.mapToUserDto(user);
		return modelMapper.map(user, UserDto.class);
	}
	public User authenticate(String usernameOrEmail, String password) {
        Optional<User> userOptional = userRepository.findByUsernameOrEmail(usernameOrEmail, usernameOrEmail);
        if (userOptional.isPresent()) {
            User user = userOptional.get();
            if (passwordEncoder.matches(password, user.getPassword())) {
                logger.info("User authenticated successfully");
                return user;
            } else {
                logger.warn("Password does not match");
            }
        } else {
            logger.warn("User not found");
        }
        return null;
    }
	public List<User> getAllUsers() {
        return userRepository.findAll();
    }
}
